# Solution 1
# 2806 ms
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:

        m = []
        for i in range(1, len(nums)+1):
            m.append(i)
        
        set_dif = list(set(nums).symmetric_difference(set(m)))

        for num in nums:
            if nums.count(num) == 2:
                return num, set_dif[0]
# Solution 2:
# List Comprehension
# > 7000 ms :<
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        d = [num for num in nums if nums.count(num) == 2]
        n = [num for num in range(1, len(nums)+1)]
        m = list(set(nums).symmetric_difference(set(n)))
        
        return d[0], m[0]

# Solution 3:
class Solution:
    def findErrorNums(self, nums: List[int]) -> List[int]:
        n = len(nums)
        s = n*(n+1)//2 # sum of right nums
        missing = s - sum(set(nums))
        duplicate = sum(nums) + missing - s
        return [duplicate, missing]
