# Solution 1:
class Solution:
    def longestNiceSubstring(self, s: str) -> str:
        if len(s) < 2: return ""
        
        mp = set(list(s))

        for i,c in enumerate(s):
            if c.upper() in mp and c.lower() in mp: continue
            
            first = self.longestNiceSubstring(s[:i])
            second = self.longestNiceSubstring(s[i+1:])
            
            return max(first, second, key = len)
        
        return s
# Solution 2:
class Solution:
    # Function to find the longest nice substring
    def longestNiceSubstring(self, s: str) -> str:
        # Create a set of characters present in the string
        char = set(s)

        # Iterate over each character in the string
        for i in range(len(s)):
            # Check if both lowercase and uppercase versions of the current character exist in the string
            if not (s[i].lower() in char and s[i].upper() in char):
                # If either is missing, divide the string into two parts from the current character
                # and recursively find the longest nice substring in each part
                s1 = self.longestNiceSubstring(s[:i])
                s2 = self.longestNiceSubstring(s[i + 1:])

                # Return the longer of the two nice substrings
                return s2 if len(s2) > len(s1) else s1

        # If every character in the string has its pair (both uppercase and lowercase), return the entire string
        return s
