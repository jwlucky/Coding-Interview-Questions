# Solution 1:
class Solution:
    def unequalTriplets(self, nums: List[int]) -> int:

        pairs = []
        for i in range(len(nums)-2):
            for j in range(len(nums)-1):
                for k in range(len(nums)):
                    if i < j and nums[i] != nums[j]:
                        if j < k and nums[j] != nums[k]:
                            if i < k and nums[i] != nums[k]:
                                pairs.append([nums[i], nums[j], nums[k]])
        return len(pairs)

# Solution 2:
class Solution:
    def unequalTriplets(self, nums: List[int]) -> int:
        arr = sorted(nums)
        ans = 0
        for i,j,k in combinations(nums, 3): # itertools 
            if i != j and i != k and j != k:
                ans += 1
        return ans


# Solution 3:
from collections import Counter

class Solution:
    def unequalTriplets(self, nums: List[int]) -> int:
        c = Counter(nums)   
        v = list(c.values())
        res = 0
        for i in range(len(v)):
            for j in range(i+1, len(v)):
                for k in range(j+1, len(v)):
                    res += v[i] * v[j] * v[k]
        return res
            
