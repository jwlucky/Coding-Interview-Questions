# Solution 1:

class Solution:
    def tribonacci(self, n: int) -> int:
        # base cases
        if n == 0:
            return 0
        elif n == 1 or n == 2:
            return 1
        
        dp = [0] * (n + 1)
        dp[1] = 1
        dp[2] = 1
        # Fill in the dp list iteratively from dp[3] up to dp[n] using the recurrence relation
        for i in range(3, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3]
        
        return dp[n]

# Solution 2:
class Solution:
    def tribonacci(self, n: int) -> int:
        if n == 0:
            return 0
        elif n == 1 or n == 2:
            return 1
        
        a, b, c = 0, 1, 1
        
        for i in range(3, n + 1):
            next_trib = a + b + c
            a = b
            b = c
            c = next_trib
        
        return c
